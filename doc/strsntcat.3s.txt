STRSNTCAT(3S)                                                                      -                                                                      STRSNTCAT(3S)

NAME
       strsntcat, strstcat - size-bounded sub-string concatenation

SYNOPSIS
       #include "strtnt.h"

       int strsntcat(char *dst, size_t dstsize, const char *src, size_t nb);

       int strstcat(char *dst, size_t dstsize, const char *src, size_t nb);

DESCRIPTION
       The  strsntcat()  and  strstcat()  functions  append  up to the first (not null) nb characters from the source string pointed to by src to the destination array
       pointed to by dst, overwriting its terminating null byte ('\0'). Then, a new null byte is appended to the new string. The full size of  the  destination  buffer
       dst is dstsize.

       The strstcat() function specifies that truncation is allowed. When truncation is not allowed, the strsntcat() function should be used.

       Let dstlen the length of the string pointed to by dst, srclen the length of the string pointed to by src and m = min( srclen , nb ).  If dstlen + m is less than
       dstsize, the strsntcat() and strstcat() functions only append m characters to src and an additionnal null byte to dst.  They do not pad  the  remainder  of  dst
       with null bytes.

       When dstlen + m >= dstsize, the strsntcat() function returns the error code ETRUNC and the destination buffer dst remains unchanged. The strstcat() function ap‐
       pends dstsize - dstlen - 1 characters and a terminating null byte. The return value is OTRUNC.

       The strsntcat() and strstcat() functions store a well-formed string (i.e. a string with a terminating null byte) into the buffer pointed to by dst or leave this
       buffer unchanged.

       The destination buffer pointed to by dst remains unchanged if one of these conditions is realized:

       * dst is a NULL pointer or the buffer pointed to by dst contains a bad-formed string (i.e. a string without a terminating null byte).

       * dstsize is equal to 0.

       * src is a NULL pointer.

       * nb is equal to 0.

       * srclen is equal to 0.

       * The strsntcat() function is used and dstlen + m >= dstsize.

       The behavior of the strsntcat() and strstcat() functions is undefined if:

       * dst and src overlap.

       * dstsize is different to 0 and does not correspond to the actual size of the destination buffer pointed to by dst.

       * src is a bad-formed string.

RETURN VALUE
       These functions return:

       * A non negative integer after success:

           ONOTRUNC
               No truncation was done during the concatenation: strstcat(), strsntcat().

           OTRUNC
               An allowed truncation was done during the concatenation: strstcat().

       * A negative integer after error:

           EDSTNUL
               dst is a NULL pointer: strstcat(), strsntcat().

           EDSTSZ0
               dstsize is equal to 0: strstcat(), strsntcat().

           EDSTBF
               dst is a bad-formed string: strstcat(), strsntcat().

           ESRCNUL
               src is a NULL pointer: strstcat(), strsntcat().

           ETRUNC
               The remaining space is too small and truncation is not allowed: strsntcat().

PORTABILITY
       The strsntcat() and strstcat() functions conform to C89.

NOTES
       These functions are designed to replace the strncat() and strncat_s() functions. They are easier to use, more robust, more consistent and less error prone.

             char randomId[10] = "XXX-";
             int r ;

             /* Truncation is allowed */
             if ( (r = strstcat(randomId,sizeof(randomId),src,n)) < 0 )
                /* error processing */

SEE ALSO
       strntcat(), strtcat().

GNU                                                                            2023-01-27                                                                 STRSNTCAT(3S)
